plot_ly(coords,
x= ~s, y=~t, z=~cor,
type = 'scatter3d', mode = "markers", size = .1)
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series[,1:10])
tsplot(all_series, spaghetti = TRUE, type = "p")
lines(cs)
coords <- expand.grid(1:Time, 1:Time)
names(coords) <- c("s", "t")
coords$cor <- NA
coords$pval <- NA
cor_mat_theoretical <- cor_mat <- matrix(rep(NA, times = Time*Time), nrow = Time)
for(i in 1:nrow(coords)){
out <- cor.test((all_series[coords[i,1],]), (all_series[coords[i,2],]))
if(coords[i,1]==coords[i,2]){
coords$cor[i] <- 1
coords$pval[i] <- 0
cor_mat[coords[i,1], coords[i,2]] <- 1
cor_mat_theoretical[coords[i,1], coords[i,2]] <- 1
}else{
coords$cor[i] <- out$estimate
coords$pval[i] <- out$p.value
cor_mat[coords[i,1], coords[i,2]] <- out$estimate
cor_mat_theoretical[coords[i,1], coords[i,2]] <- 0
}
}
plot_ly(coords,
x= ~s, y=~t, z=~cor,
type = 'scatter3d', mode = "markers", size = .1)
fig %>% add_surface()
fig <- plot_ly(z = ~cor_mat)
# that looks crazy, let's see the surface
fig <- plot_ly(z = ~cor_mat_theoretical)
fig %>% add_surface()
fig <- plot_ly(z = ~cor_mat)
fig %>% add_surface()
plot_ly(coords,
x= ~s, y=~t, z=~cor,
type = 'scatter3d', mode = "markers", size = .1)
fig <- plot_ly(z = ~cor_mat)
fig %>% add_surface()
plot_ly(coords,
x= ~s, y=~t, z=~cor,
type = 'scatter3d', mode = "markers", size = .1)
## "drape a blanket over it to see the pattern better"
fig <- plot_ly(z = ~cor_mat)
fig %>% add_surface()
# Theoretical function
fig <- plot_ly(z = ~cor_mat_theoretical)
fig %>% add_surface()
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series[,1:10])
tsplot(all_series[,1:10])
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series[,1:10])
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series[,1:5])
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series[,1:5])
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series, spaghetti = TRUE)
Time <- 10
n_sim <- 100
all_series = matrix(rep(NA, times = n_sim*Time), nrow = Time)
for(i in 1:n_sim){
cs = 0.25*1:Time        # same thing
w  = rnorm(Time + 50,0,1)
#w_dep = stats::filter(w, filter = rep(1/3,3))[2:(Time + 1)]
#all_series[,i] <- cs + w_dep
all_series[,i] <- cs + w[2:(Time+1)]
#names(all_series)[i] <- paste("sim_", i)
}
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
tsplot(all_series[,1:5], main = "Five simulated Time series")
tsplot(all_series[,1:5], main = "One simulated Time series", type = "b")
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c(rep("white", times = 9), "blue"))
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c(rep("grey", times = 9), "blue"))
fit <- lm(all_series[,1]~time(all_series[,1]), na.action=NULL)
tsplot(salmon, col=4, ylab="USD per KG", main="Salmon Export Price")
abline(fit)
fit <- lm(all_series[,1]~time(all_series[,1]), na.action=NULL)
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c(rep("grey", times = 9), "blue"))
abline(fit)
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue" rep("black", times = 8), "magenta"))
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16)
tsplot(all_series[,1:5], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16))
tsplot(all_series[,1:5], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16)
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16))
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16)
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, size = 5)
?tsplot
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 5)
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
par(mfrow = c(5,1))
tsplot(all_series[,1], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,2], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,3], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,4], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,5], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
, cex = 3
tsplot(all_series[,1], main = "Five simulated Time series", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,2], col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
tsplot(all_series[,2], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
par(mfrow = c(5,1))
for(i in 1:5){
tsplot(all_series[,i], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
}
par(mfrow = c(4,1))
for(i in 1:4){
tsplot(all_series[,i], type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3)
}
tsplot(all_series[,i], type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3, ylim = c(-3,3))
tsplot(all_series[,i], type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3, ylim = c(-3,8))
tsplot(all_series[,i], type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3, ylim = c(-3,6))
par(mfrow = c(4,1))
for(i in 1:4){
tsplot(all_series[,i], type = "b", col = c("black", "blue", rep("black", times = 7), "magenta"), pch = 16, cex = 3, ylim = c(-3,6))
}
par(mfrow = c(2,2))
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series", pch = 16)
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
tsplot(all_series[,1], main = "One simulated Time series", type = "b", col = c("black", "blue", rep("black", times = 5), "magenta", "black", "black"), pch = 16, cex = 3)
rect(xleft = 1.1, xright = 2.1, ybottom = -2, ytop = 3, col = "blue")
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
rect(xleft = 1.1, xright = 2.1, ybottom = -2, ytop = 3, col = "blue")
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 3, col = "blue")
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 3, col = "blue")
?rect
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 4, border = "blue")
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 4, border = "blue")
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series")
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 4, border = "blue", lwd = 2)
tsplot(all_series, spaghetti = TRUE, main = "100 Simuated Trend Stationary Time Series", type = "b")
rect(xleft = 1.5, xright = 2.5, ybottom = -2, ytop = 4, border = "blue", lwd = 2)
rect(xleft = 7.5, xright = 8.5, ybottom = -.5, ytop = 5, border = "magenta", lwd = 2)
plot(x_2_all, x_8_all)
abline(lm(x_8_all~x_2_all))
x_2_all <- all_series[2,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_2_all, col = "blue")
hist(x_8_all, col = "magenta")
plot(x_2_all, x_8_all, col = "purple")
abline(lm(x_8_all~x_2_all))
x_1_all <- all_series[1,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_1_all, col = "black")
hist(x_8_all, col = "magenta")
plot(x_2_all, x_8_all, col = "salmon")
abline(lm(x_8_all~x_2_all), pch = 16)
x_1_all <- all_series[1,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_1_all, col = "black")
hist(x_8_all, col = "magenta")
plot(x_2_all, x_8_all, col = "black", pch = 16)
abline(lm(x_8_all~x_2_all))
x_1_all <- all_series[1,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_1_all, col = "grey")
hist(x_8_all, col = "magenta")
plot(x_2_all, x_8_all, col = "grey", pch = 16)
abline(lm(x_8_all~x_2_all))
x_comp <- all_series[2,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_comp, col = "darkgrey")
hist(x_8_all, col = "magenta")
plot(x_comp, x_8_all, col = "darkgrey", pch = 16)
abline(lm(x_8_all~x_comp))
x_2_all <- all_series[2,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_2_all, col = "blue")
hist(x_8_all, col = "magenta")
plot(x_2_all, x_8_all, col = "purple", pch = 16)
abline(lm(x_8_all~x_2_all))
i = 1
x_comp <- all_series[i,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_comp, col = "blue", main = paste("Histogram of simulations at t=", i), xlab = paste("x_",i))
hist(x_8_all, col = "magenta", main = paste("Histogram of simulations at t=8"), xlab = "x_8")
plot(x_comp, x_8_all, col = "purple", pch = 16, main = "Joint Distribution")
abline(lm(x_8_all~x_comp))
x <- data.frame(x_comp, x_8)
i = 1
x_comp <- all_series[i,]
x_8_ <- all_series[8,]
par(mfrow = c(2,2))
hist(x_comp, col = "blue", main = paste("Histogram of simulations at t=", i), xlab = paste("x_",i))
hist(x_8_all, col = "magenta", main = paste("Histogram of simulations at t=8"), xlab = "x_8")
plot(x_comp, x_8_all, col = "purple", pch = 16, main = "Joint Distribution")
abline(lm(x_8_all~x_comp))
x <- data.frame(x_comp, x_8)
i = 1
x_comp <- all_series[i,]
x_8 <- all_series[8,]
par(mfrow = c(2,2))
hist(x_comp, col = "blue", main = paste("Histogram of simulations at t=", i), xlab = paste("x_",i))
hist(x_8, col = "magenta", main = paste("Histogram of simulations at t=8"), xlab = "x_8")
plot(x_comp, x_8, col = "purple", pch = 16, main = "Joint Distribution")
abline(lm(x_8~x_comp))
x <- data.frame(x_comp, x_8)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point() + xlim(0,6) + ylim(0,6)+
geom_text(aes(x = 4, y = 2, label = paste("rho(2,8) = \n cor(x_2, x_8) = ", cor(x_comp, x_8)), size = 6)) + coord_fixed()
# Arguments for each marginal histogram
ggMarginal(p, type = "density", adjust = 2,
xparams = list(col = "blue", fill = "blue"),
yparams = list(col = "magenta", fill = "magenta"))
x <- data.frame(x_comp, x_8)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x_comp, y = x_8)) +
geom_point() + xlim(0,6) + ylim(0,6)#+
geom_text(aes(x = 4, y = 2, label = paste("rho(",i,",8) = \n cor(x_",i,", x_8) = ", round(cor(x_comp, x_8),3)), size = 6)) + coord_fixed()
x <- data.frame(x_comp, x_8)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x_comp, y = x_8)) +
geom_point() + xlim(0,6) + ylim(0,6)+
geom_text(aes(x = 4, y = 2, label = paste("rho(",i,",8) = \n cor(x_",i,", x_8) = ", round(cor(x_comp, x_8),3)), size = 6)) + coord_fixed()
# Arguments for each marginal histogram
ggMarginal(p, type = "density", adjust = 2,
xparams = list(col = "blue", fill = "blue"),
yparams = list(col = "magenta", fill = "magenta"))
plot(1:10, NA)
plot(1:10, rep(NA, times = 10))
plot(1:10, rep(1, times = 10), pch = "NA")
plot(1:10, rep(1, times = 10), pch = "")
plot(1:10, rep(1, times = 10), pch = "", axes = F)
i = 1
x_comp <- all_series[i,]
x_8_all <- all_series[8,]
par(mfrow = c(2,2))
hist(x_comp, col = "blue", main = paste("Histogram of simulations at t=", i), xlab = paste("x_",i))
hist(x_8_all, col = "magenta", main = paste("Histogram of simulations at t=8"), xlab = "x_8")
plot(x_comp, x_8_all, col = "purple", pch = 16, main = "Joint Distribution")
abline(lm(x_8_all~x_comp))
plot(1:10, rep(1, times = 10), pch = "", axes = F, xlab = "", ylab = "")
text(x = 5, y = 1, label = paste("gamma(", "i",", 8) = cor(x_",i,",x_8) = ", round(cor(x_comp,x_8_all),3) ))
?text
cors <- apply(all_series, 1, function(x){cor(x, all_series[8,])})
cors
cors <- apply(all_series, 1, function(x){cor(x, all_series[8,])})
hist(cors)
hist(cors, breaks = "scott")
hist(cors, breaks = seq(-1, 1, by = .1))
ggpairs(t(all_series))
pairs(t(all_series))
library(ggally)
install.packages("ggally")
install.packages("GGally")
library(GGally)
ggpairs(t(all_series))
ggpairs(data.frame(t(all_series)))
combn(10,2)
coords <- combn(10,2)
coords
coords <- t(combn(10,2))
cors <- NULL
for(i in 1:nrow(coords)){
cors <- c(cors, cor(all_series[coords[i,1],], all_series[coords[i,2],]))
}
hist(cors, breaks = seq(-1, 1, by = .1), main = "Correlation between simulations for x_8 and x_i")
?combn
fit = lm(salmon~time(salmon), na.action=NULL) # the regression
par(mfrow=c(2,1)) # plot transformed data
tsplot(salmon, main="detrended salmon price")
line(fit)
# as in the text
fit = lm(salmon~time(salmon), na.action=NULL) # the regression
par(mfrow=c(2,1)) # plot transformed data
tsplot(salmon, main="detrended salmon price")
abline(fit)
tsplot(resid(salmon))
tsplot(resid(fit))
# as in the text
fit = lm(salmon~time(salmon), na.action=NULL) # the regression
par(mfrow=c(2,1)) # plot transformed data
tsplot(salmon, main="salmon price")
abline(fit)
tsplot(resid(fit))
abline(lm(resid(fit)~time(resid(fit))))
# as in the text
fit = lm(salmon~time(salmon), na.action=NULL) # the regression
par(mfrow=c(2,1)) # plot transformed data
tsplot(salmon, main="salmon price")
abline(fit)
tsplot(resid(fit))
abline(lm(resid(fit)~time(resid(fit))))
6/16 > 3/9
jj_decomp <- decompose(jj)
plot(jj_decomp)
tsplot(jj)
plot(jj_decomp)
plot(decomp(rnorm(100)*1:100))
plot(decompose(rnorm(100)*1:100))
plot(decompose(ts(rnorm(100)*1:100), 5))
plot(decompose(ts(rnorm(100)*1:100),frequency =  5))
plot(decompose(ts(rnorm(100)*1:100,frequency =  5))
)
acf(jj_decomp$random, na.action = na.pass) ## acf of random component
acf(rnorm(length(jj))) ## acf of white noise of same length
acf(rnorm(length(jj))) ## acf of white noise of same length
acf(jj_decomp$random, na.action = na.pass) ## acf of random component
acf(jj_decomp$random, na.action = na.pass) ## acf of random component
time(salmon)
1/12
#| label: part2-1
#| eval: true
#| echo: true
library(astsa)
w <- rnorm(100)
x_t <- stats::filter(x = w, filter = 0.7, method = "recursive")
acf(x_t)
#| label: part2-1
#| eval: true
#| echo: true
library(astsa)
w <- rnorm(100)
x_t <- stats::filter(x = w, filter = 0.7, method = "recursive")
#| label: part2-2
#| eval: true
#| echo: true
x_t_lag1 <- stats::lag(x_t, k = 1)
#| label: part2-3
#| eval: true
#| echo: true
cbind(x_t, x_t_lag1)
#| label: part2-4
#| eval: true
#| echo: true
tsplot(x_t)
tsplot(x_t_lag1)
#| label: part2-5
#| eval: true
#| echo: true
plot(x_t, x_t_lag1)
plot(as.vector(x_t), as.vector(x_t_lag1))
#| label: part2-6
#| echo: true
#| eval: true
x_t_lag1 <- dplyr::lag(as.vector(x_t), n = 1)
plot(x_t, x_t_lag1)
plot(as.vector(x_t), as.vector(x_t_lag1))
#| label: part2-7
#| echo: true
#| eval: true
linear_model <- lm(x_t ~ -1 + x_t_lag1)
summary(linear_model)
#| label: part2-8
#| echo: true
#| eval: true
acf(x_t)
acf(residuals(linear_model))
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807); w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
set.seed(807);w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
w <- rnorm(500)
ar_1 <- stats::filter(w, filter = 0.8, method = "recursive")
# use acf() function
acf(ar_1)
View(stats::filter)
?stats::filter
