install.packages("usethis")
usethis::create_github_token()
gitcreds::gitcreds_set()
w_t <- rnorm(10, 0, 1)
plot(1:10, w_t, type = "b")
w_t1 <- w_t[-1]
cbind(wt, wt_1)
cbind(wt, w_t1)
cbind(w_t, w_t1)
w_t1 <- c(NA, w_t[-1])
cbind(w_t, w_t1)
w_t1 <- c(NA, w_t[2:10])
cbind(w_t, w_t1)
w_t1 <- c(NA, w_t[1:9])
cbind(w_t, w_t1)
cor(w_t, w_t1)
?cor
cor(w_t, w_t1, na.rm = T)
cor(w_t, w_t1, use = c("complete.obs"))
w_t2 <- c(NA, NA, w_t[1:8])
cbind(w_t, w_t1, w_t2)
v_t <- .33*(w_t, w_t1, w_t2)
v_t <- .33*(w_t + w_t1 + w_t2)
#| code-fold: false
#| echo: true
#| label: setup
library(astsa)
#| code-fold: true
#| echo: true
#| label: white-noise
w <- rnorm(500, 0, 1)
plot(w)
hist(w)
View(cbind(v_t, w_t, w_t1, w_t2))
#| code-fold: true
#| echo: true
#| label: white-noise
w <- rnorm(500, 0, 1)
plot(w, type = "l", col = "blue", xlab = "t (order of sampling)")
plot(w, type = "l", col = "blue", xlab = "t (order of sampling)")
plot(w, type = "p", col = "blue", xlab = "t (order of sampling)")
x
w_t <- rnorm(10, 0, 1)
plot(1:10, w_t, type = "b")
plot(v_t)
plot(v_t, type = "b")
#| code-fold: true
#| echo: true
#| label: ex-1-6-no-lines
par(mfrow=c(3,1))
x = ts(fmri1[,4:9], start=0, freq=32)        # data
names = c("Cortex","Thalamus","Cerebellum")
u = ts(rep(c(rep(.6,16), rep(-.6,16)), 4), start=0, freq=32) # stimulus signal
for (i in 1:3){
j = 2*i-1
tsplot(x[,j:(j+1)], ylab="BOLD", xlab="", main=names[i], col=5:6, ylim=c(-.6,.6),
lwd=2, xaxt="n", spaghetti=TRUE)
axis(seq(0,256,64), side=1, at=0:4)
#lines(u, type="s", col=gray(.3))
}
mtext("seconds", side=1, line=1.75, cex=.9)
#| code-fold: true
#| echo: true
#| label: ex-1-6-no-lines
par(mfrow=c(3,1))
x = ts(fmri1[,4:9], start=0, freq=32)        # data
names = c("Cortex","Thalamus","Cerebellum")
u = ts(rep(c(rep(.6,16), rep(-.6,16)), 4), start=0, freq=32) # stimulus signal
for (i in 1:3){
j = 2*i-1
tsplot(x[,j:(j+1)], ylab="BOLD", xlab="", main=names[i], col=5:6, ylim=c(-.6,.6),
lwd=2, xaxt="n", spaghetti=TRUE)
axis(seq(0,256,64), side=1, at=0:4)
#lines(u, type="s", col=gray(.3))
}
mtext("seconds", side=1, line=1.75, cex=.9)
tsplot(soi, ylab="", xlab="", main="Southern Oscillation Index", col=4)
soi_ma_smoothed <- stats::filter(soi, sides = 1, filter = rep(1/3, 3))
tsplot(soi_ma_smoothed, ylab="", xlab="", main="Southern Oscillation Index", col=4)
w_t <- rnorm(10, 0, 1)
plot(1:10, w_t, type = "b")
w_t1 <- c(NA, w_t[1:9])
w_t2 <- c(NA, NA, w_t[1:8])
v_t <- w_t + w_t1 + w_t2
cbind(w_t, w_t1, w_t2)
ma_3 <- cbind(v_t, w_t, w_t1, w_t2)
w_t <- rnorm(10, 0, 1)
plot(1:10, w_t, type = "b")
w_t1 <- c(NA, w_t[1:9])
w_t2 <- c(NA, NA, w_t[1:8])
v_t <- w_t + w_t1 + w_t2
ma_3 <- cbind(v_t, w_t, w_t1, w_t2)
kable(ma_3)
w_t <- rnorm(10, 0, 1)
plot(1:10, w_t, type = "b")
w_t1 <- c(NA, w_t[1:9])
w_t2 <- c(NA, NA, w_t[1:8])
v_t <- w_t + w_t1 + w_t2
ma_3 <- cbind(v_t, w_t, w_t1, w_t2)
ma_3
round(ma_3, 3)
plot(1:10, v_t)
#| echo: true
#| code-fold: show
# generate white noise
n = 100
w_t <- rnorm(100, 0, 1)
## manually lag terms
w_t1 <- c(NA, w_t[1:(n-1)])
w_t2 <- c(NA, NA, w_t[1:(n-2)])
## manually compute MA(3)
v_t <- (w_t + w_t1 + w_t2)/3
round(ma_3, 3)
## compare the vectors
ma_3 <- cbind(v_t, w_t, w_t1, w_t2)
round(ma_3, 3)
x <- rnorm(100, 10, 1)
y <- rnorm(100, 9.5, .75)
z = c(x, y)
hist(z)
x <- rnorm(1000, 10, 1)
y <- rnorm(100, 9.5, .75)
z = c(x, y)
hist(z)
hist(z, breaks = "scott")
y <- rnorm(1000, 9.5, .75)
z = c(x, y)
hist(z, breaks = "scott")
x <- rnorm(100, 10, 1)
y <- rnorm(1000, 9, .75)
z = c(x, y)
hist(z, breaks = "scott")
x <- rnorm(100, 10, 1)
y <- rnorm(100, 9, .75)
z = c(x, y)
hist(z, breaks = "scott")
x <- rnorm(100, 10, 1)
y <- rnorm(100, 7, .75)
z = c(x, y)
hist(z, breaks = "scott")
y <- rnorm(1000, 7, .75)
z = c(x, y)
hist(z, breaks = "scott")
x <- rnorm(500, 10, 1)
y <- rnorm(1000, 7, .75)
z = c(x, y)
hist(z, breaks = "scott")
x <- rnorm(500, 10, 1)
y <- rnorm(1000, 7, .75)
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 7, .75)
hist(c(x,y))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
hist(c(x,y))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
hist(c(x,y))
boxplot(c(x,y))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
hist(c(x,y))
boxplot(c(x,y), horizontal = T)
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
hist(c(x,y))
boxplot(c(x,y), horizontal = T)
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
hist(z)
identity()
locator(1)
?text
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 11, y = 250,
labels = paste("mean = ", round(mean(z),3),
"sd = ", round(sd(z),3)))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 11, y = 250,
labels = paste("mean = ", round(mean(z),3),
"sd = ", round(sd(z),3)))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 11, y = 250,
labels = paste("mean = ", round(mean(z),3),
"\n sd = ", round(sd(z),3)))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 13, y = 250,
labels = paste("mean = ", round(mean(z),3),
"\n sd = ", round(sd(z),3)))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 12, y = 250,
labels = paste("mean = ", round(mean(z),3),
"\n sd = ", round(sd(z),3)))
x <- rnorm(1000, 10, 1)
y <- rnorm(1000, 8, .75)
z <- c(x,y)
hist(z)
text(x = 12, y = 250,
labels = paste("mean = ", round(mean(z),2),
"\n sd = ", round(sd(z),2)))
hist(z)
abline(v = mean(z), col = "red")
abline(v = mean(z) + sd(z), col = "blue", lty = 2)
abline(v = mean(z) - sd(z), col = "blue", lty = 2)
text(x = 11, y = 225,
labels = paste("mean = ", round(mean(z),2),
"\n sd = ", round(sd(z),2)))
x <- rnorm(100)
y = rnorm(100)
plot(x,y)
cov(x,y)
install.packages("ggplot2")
install.packages("ggExtra")
x <- data.frame(x1, x2)
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, 1, 1)
x <- data.frame(x1, x2)
x <- data.frame(x1, x2)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# install.packages("ggplot2")
# install.packages("ggExtra")
library(ggplot2)
# install.packages("ggplot2")
# install.packages("ggExtra")
library(ggplot2)
library(ggExtra)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
install.packages("MASS")
#install.packages("MASS")
library(MASS)
matrix(c(5, 3, 1, 6),
ncol = 2)
Sigma = matrix(c(5, 3, 6, 1),
ncol = 2)
Sigma
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 3, 6, 1),
ncol = 2))
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 6, 1),
ncol = 2))
x
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 6, 1),
ncol = 2))
x
x <- data.frame(x1 = x[,1], x2 = x[,2])
x
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
# install.packages("ggplot2")
# install.packages("ggExtra")
library(ggplot2)
library(ggExtra)
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, .1, 1)
x <- data.frame(x1, x2)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
#install.packages("MASS")
library(MASS)
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 6, .1),
ncol = 2))
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 1, .1),
ncol = 2))
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 1, 1),
ncol = 2))
x <- data.frame(x1 = x[,1], x2 = x[,2])
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
?ggMarginal
?mvrnorm
# install.packages("ggplot2")
# install.packages("ggExtra")
library(ggplot2)
library(ggExtra)
x1 <- rnorm(100, 10, 5)
x2 <- rnorm(100, .1, 1)
x <- data.frame(x1, x2)
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
#install.packages("MASS")
library(MASS)
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 1, 1),
ncol = 2))
x <- data.frame(x1 = x[,1], x2 = x[,2])
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 1, .1),
ncol = 2))
x<- mvrnorm(100, mu = c(10, 1), Sigma = matrix(c(5, 1, 1, .5),
ncol = 2))
x <- data.frame(x1 = x[,1], x2 = x[,2])
# Save the scatter plot in a variable
p <- ggplot(x, aes(x = x1, y = x2)) +
geom_point()
# Arguments for each marginal histogram
ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
#install.packages("patchwork")
library(patchwork)
install.packages("patchwork")
#install.packages("patchwork")
library(patchwork)
# Arguments for each marginal histogram
p2<- ggMarginal(p, type = "histogram",
xparams = list(fill = 4),
yparams = list(fill = 3))
p2
?tsplot
tsplot(xa, main="autoregression", type = "b")
# cs = 2*cos(2*pi*(1:500)/50 + .6*pi)    # as in the text
cs = 2*cos(2*pi*(1:500+15)/50)           # same thing
w  = rnorm(500,0,1)
par(mfrow=c(3,1))
tsplot(cs + w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,1)))
points(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
tsplot(cs + 5*w, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)+N(0,25)))
points(cs, ylab="", main = expression(x[t]==2*cos(2*pi*t/50+.6*pi)))
?stats::filter
rep(1,4)/4
rep(.25, 4)
#| code-fold: true
#| echo: true
xc = log(jj)
vb = filter(xc, rep(1,4)/4, sides=1) # moving average
vc = filter(xc, rep(1,4)/4, sides=1) # moving average
tsplot(xc, main="sinusoid + noise", type = "b", pch = 16)
tsplot(xc, main="johnson and johnson (log scale)", type = "b", pch = 16)
vc = stats::filter(xc, filter = rep(1,4)/4, sides=1, method = "convolution") # moving average
tsplot(xc, main="johnson and johnson (log scale)", type = "b", pch = 16)
lines(vc, col="blueviolet", lwd = 2)
tsplot(xc, main="johnson and johnson (log scale)", type = "b", pch = 16)
lines(vc, col="blueviolet", lwd = 2)
ww <- read.csv("https://github.com/hou-wastewater-epi-org/online_trend_estimation/blob/main/Data/synthetic_ww_time_series.csv", header = T)
ww <- read.csv("https://raw.githubusercontent.com/hou-wastewater-epi-org/online_trend_estimation/refs/heads/main/Data/synthetic_ww_time_series.csv", header = T)
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
# install.packages("dplyr")
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
install.packages("dplyr")
# install.packages("dplyr")
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
install.packages("tidyverse")
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
install.packages("tidyverse")
library(tidyverse)
## Import the csv here into r: https://raw.githubusercontent.com/hou-wastewater-epi-org/online_trend_estimation/refs/heads/main/Data/synthetic_ww_time_series.csv
ww <- read.csv("https://raw.githubusercontent.com/hou-wastewater-epi-org/online_trend_estimation/refs/heads/main/Data/synthetic_ww_time_series.csv", header = T)
#install.packages("tidyverse")
library(tidyverse)
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
head(ww_WWTP)
ww_WWTP
tsplot(ww_WWTP)
library(astsa)
tsplot(ww_WWTP)
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
tsplot(ww_WWTP)
tsplot(ww_WWTP$value)
?tsplot
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value)
library(astsa)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value)
str(ww)
ww$dates <- as.Date(ww$dates)
str(ww)
## Import the csv here into r: https://raw.githubusercontent.com/hou-wastewater-epi-org/online_trend_estimation/refs/heads/main/Data/synthetic_ww_time_series.csv
ww <- read.csv("https://raw.githubusercontent.com/hou-wastewater-epi-org/online_trend_estimation/refs/heads/main/Data/synthetic_ww_time_series.csv", header = T)
ww$dates <- as.Date(ww$dates)
#install.packages("tidyverse")
library(tidyverse)
ww_WWTP <- ww %>% dplyr::filter(name == "WWTP")
library(astsa)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value)
ww_WWTP$dates[1:6]
ww_WWTP$dates[2] - ww_WWTP$dates[1]
ww_ma <- stats::filter(ww_WWTP$value, filter = rep(1/5, 5), sides = 2)
lines(ww_ma)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value, "")
lines(ww_ma)
ww_ma <- stats::filter(ww_WWTP$value, filter = rep(1/5, 5), sides = 2)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value, "")
lines(ww_ma)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value, "")
lines(ww_ma)
ww_ma
ww_WWTP$value
?tsplot
?lines
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value, "")
lines(x = ww_WWTP$dates, y = ww_ma)
tsplot(x = ww_WWTP$dates, y = ww_WWTP$value, "")
lines(x = ww_WWTP$dates, y = ww_ma)
lines(x = ww_WWTP$dates, y = ww_ma_3, lwd = 2, col = "blueviolet", type = "b", pch = 17)
?stats::filter
